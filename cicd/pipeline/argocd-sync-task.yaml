apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    operator.tekton.dev/last-applied-hash: 82cbda20cf833bb27b157e91a090463caaabb0176b6a7054b068234f1fef5fce
    tekton.dev/categories: Deployment
    tekton.dev/displayName: argocd
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: deploy
  name: argocd-task-sync-and-wait
  labels:
    app.kubernetes.io/version: '0.2'
    operator.tekton.dev/provider-type: community
spec:
  description: >-
    This task syncs (deploys) an Argo CD application and waits for it to be
    healthy.

    To do so, it requires the address of the Argo CD server and some form of
    authentication either a username/password or an authentication token.
  params:
    - description: ArgoCD Application Prefix name
      name: application-name
      type: string
    - name: environment
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap  # used for server address
      - secretRef:
          name: argocd-env-secret  # used for authentication (username/password or auth token)
  steps:
#    - image: 'quay.io/argoproj/argocd:$(params.argocd-version)'
    - image: docker.io/paichayon1/multitools-argocd:ubi7
      name: login
      resources: {}
      script: |
        #!/usr/bin/env bash
        echo "####################"
        echo $(params.environment)
        echo "####################"

        if [[ $(params.environment) == dev ]]; then
            deploy_env=dev
        elif [[ $(params.environment) == tags ]]; then
            deploy_env=sit
        elif [[ $(params.environment) == uat ]]; then
            deploy_env=uat
        elif [[ $(params.environment) == prod ]]; then
            deploy_env=prod
        elif [[ $(params.environment) == dr ]]; then
            deploy_env=dr
        else
            exit 1
        fi  

        argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD" --insecure

        # appname=$(params.application-name)-$(params.environment)
        appname=$(params.application-name)-$deploy_env

        argocd app sync "$appname" --revision main

        argocd app wait "$appname" --health


